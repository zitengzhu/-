'''
位置参数也被称为必备参数，必须按照正确的顺序将其传递到函数中，即调用时的数量和位置必须和定义时一样
1.数量和定义时必须一致：
    在调用函数时，指定的实际参数的数量必须与形式参数的数量一致，否则将报错
2.位置必须和定义时一致：
    在调用函数的时候，指定的实际参数的位置必须与形式参数的位置一样，否则将出现错误
'''
def fun(person,height ,weight):
    print('你的名字是：',person)
    print('你的身高是：',height)  # 单位cm
    print('你的体重是：',weight)  # 单位kg

fun('路人甲',183,90)

'''
你的名字是： 路人甲
你的身高是： 183
你的体重是： 90

'''



'--------------------关键字参数-------------------------'
'''
关键字参数是指使用形式参数的名字来确定输入的参数值。通过该方式指定实际参数时，它不再需要与形式参数的位置完全一样，只要将参数名字写正确即可。
'''
fun(height=183,person='路人甲',weight=200)
# 你的名字是： 路人甲
# 你的身高是： 183
# 你的体重是： 200


'------------------参数默认值设置-------------------------'
'''
调用参数时，如果没有指定某个参数，则会报错。为了解决这个问题，我们可以为参数设置默认值，即在定义函数时，直接指定形式参数的默认值。这样，当没有传入参数时，可以直接使用定义函数时设置的默认值
在定义函数时，指定默认的形式参数必须在所有的参数的末尾，否则将产生语法错误
'''
def fu2(height ,weight,person='张三'):
    print('你的名字是：', person)
    print('你的身高是：', height)  # 单位cm
    print('你的体重是：', weight)  # 单位kg

fu2(183,90)
# 你的名字是： 张三
# 你的身高是： 183
# 你的体重是： 90

# 使用。_defaults_查看函数默认值参数的当前值  并以元组的形式返回
print(fu2.__defaults__)  # ('张三',)

# 另外在使用可变参数作为函数参数的默认值时，多次调用可能导致一些意料之外的结果
def demo(obj=[]):
    print('obj的值：',obj)
    obj.append(1)
# 调用一次
demo()  # obj的值： []
# 调用两次
demo()  # obj的值： [1]
demo()  # obj的值： [1, 1]


# 为了防止出现第二种情况 最好使用None作为可变对象的默认值，这是还需要加上必要的检查代码
def demo1(obj=None):
    if obj == None:
        obj = []
        print('obj的值：', obj)
        obj.append(1)
# 调用两次
demo1()  # obj的值： []
demo1()  # obj的值： []



# 定义函数时 设置形式参数默认值时一定要记住： 默认参数必须指向不可变对象