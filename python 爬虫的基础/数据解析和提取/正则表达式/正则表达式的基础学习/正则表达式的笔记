Regular Expression,正则表达式,一种使用表达式对字符串进行匹配的语法规则
网页上抓取的源代码本质上是超长的字符串，想从里面获取内容，正则表达式十分合适

正则表达式的优点:速度快,效率高,准确性高
正则表达式的缺点:上手难度高

正则表达式的语法:使用元字符进行排列组合用来匹配字符串,在线测试正则表达式:https://tool.oschina.net/regex/

元字符:具有固定含义的特殊符号
常用元字符:
1  .元字符       匹配除了换行符以外的任意字符
2  \w元字符      匹配字母或数字或下划线
3  \s元字符      匹配任意的空白符
4  \d元字符      匹配数字
5  \n元字符      匹配一个换行符
6  \t元字符      匹配一个制表符
7
8  ^元字符       匹配字符串的开始
9  $元字符       匹配字符串的结尾
10
11  \D元字符     匹配非数字
12  \S元字符     匹配非空白符
13  \W元字符     匹配非字母或数字或下划线
14  a|b元字符    匹配字符a或字符b
15  ()元字符     匹配括号内的表达式,也表示一个组
16  [...]元字符  匹配字符组中的字符
17  [^...]      匹配除了字符组中字符的所有字符


量词(控制前面元字符出现的次数):
1  *        重复零次或更多次
2  +        重复一次或更多次
3  ？        重复零次或一次
4  {n}      重复n次
5  {n,}     重复n次或更多次
6  {n,m}    重复出现n到m次


贪婪匹配和惰性匹配:
1     .*   贪婪匹配  尽可能多的拿到结果
2     .*？  惰性匹配 尽可能少的匹配结果  （回溯）