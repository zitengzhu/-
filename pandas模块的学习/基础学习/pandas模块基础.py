import pandas as pd

# 一维数组：可以理解为excel中  某一行或者某一列的数据
# 二维数组：就是表格中的行和列


'-----------------------读取数据-----------------------------'
# read_excel 是读取excel文件
# 第一个参数是文件的路径 第二个参数是sheet表格的名称 如果不写的话默认读取第一个sheet表格
# 如果想要读取所有的sheet表格 第二个参数要写 None
# data = pd.read_excel('学生信息.xlsx',None)
# print(data)


'-------------------------写入数据-----------------------------'
# 写入数据  要么先读取别人表格的数据  生成新的表格  再进行数据写入
# 读取表格数据
# read_excel = pd.read_excel('学生信息.xlsx')
# print(read_excel)
# 读取表格数据后开始创建要写入信息的excel表格
# write = pd.ExcelWriter('new_学生信息.xlsx')  # 创建的表格名称
#  数据读取和表格创建完毕后开始写入数据
# read_excel.to_excel(  # 将读取的信息导入excel表格
    # write,  # 要写入数据的excel表格
    # sheet_name='表格1',  # 写入数据的excel表格的sheet表格名称
    # index=False  # 去除sheet表格左侧的索引
# )
# 数据写入完毕开始保存
# write._save()
# print(write)


# 写入数据除了读取别人的数据也可以自定义数据用来生成列表
# 自定义的数据类型为字典 键是名 值是数据
# dict = {
    # '学生编号':[1,2],
    # '姓名':['张三','小红'],
    # '年龄':[18,20],
    # '性别':['男','女']
# }

# 数据自定义完成之后需要将数据转换成二维数组的形式
# df = pd.DataFrame(dict)
# 数据转化完成之后开始生成excel
# df.to_excel('aa.xlsx',index=False)  # 将df内转化完成的自定义数据写入excel
# print(df)

'-----------------------------------------------------------------'

# 自定义数据 值的数量一定要保持一致（列表中 值的长度要一样）
data = {
    "姓名": ["张三", "李四", "王五", "李四", "王五", "王五", "赵六"],
    "语文成绩": [18, 53, 67, 63, 39, 70, 94],
    "数学成绩": [82, 63, 41, 59, 46, 39, 58],
    "英语成绩": [68, 52, 90, 86, 60, 98, 64],
    '星期': ["周一", "周二", "周一", "周二", "周一", "周二", "周一"]
}
# print(data)
#  不将数据转化成二位数组 数据会向右一直显示
'''
{'name': ['张三', '李四', '王五', '李四', '王五', '王五', '赵六'], 'chinese': [18, 53, 67, 63, 39, 70, 94], 'math': [82, 63, 41, 59, 46, 39, 58], 'english': [68, 52, 90, 86, 60, 98, 64], 'week': ['周一', '周二', '周一', '周二', '周一', '周二', '周一']}
'''
# print(type(data)) <class 'dict'>
# 将data内自定义的字典类型的数据转化为二维数组
df = pd.DataFrame(data)
# print(df)
'''
  姓名  语文成绩  数学成绩  英语成绩  星期   # 左侧的0-6就是数据的索引
0  张三    18    82    68  周一
1  李四    53    63    52  周二
2  王五    67    41    90  周一
3  李四    63    59    86  周二
4  王五    39    46    60  周一
5  王五    70    39    98  周二
6  赵六    94    58    64  周一
'''


'----------------------查看数据------------------------------------'
# 当我们拿到一个excel需要做数据处理和数据分析的时候
# 第一步不要直接处理数据  需要先检查一下数据是否正确  类型是否合理  值是否存在


# 查看数据特征要调用 describe
# describe 可以获取数据的最大值 最小值 平均值 和标准差
# print(df.describe())
'''
        语文成绩     数学成绩   英语成绩
count   7.000000   7.000000   7.000000  总人数  
mean   57.714286  55.428571  74.000000  平均分
std    24.260491  14.998413  17.281975  标准差
min    18.000000  39.000000  52.000000  最小值
25%    46.000000  43.500000  62.000000
50%    63.000000  58.000000  68.000000  中位数
75%    68.500000  61.000000  88.000000
max    94.000000  82.000000  98.000000  最大值
'''


# 查看数据的前五行要调用 head()
# head() 中括号内如果没有数据就是默认查看前五行 如果有数据括号内的数据是几就查看前几行
# print(df.head(2))   # 查看前两行信息
'''
姓名  语文成绩  数学成绩  英语成绩  星期
0  张三    18    82    68  周一
1  李四    53    63    52  周二
'''


# print(df.head(10))  head()中括号内的数字如果超过索引的值不会报错只会默认查看所有信息
'''
姓名  语文成绩  数学成绩  英语成绩  星期
0  张三    18    82    68  周一
1  李四    53    63    52  周二
2  王五    67    41    90  周一
3  李四    63    59    86  周二
4  王五    39    46    60  周一
5  王五    70    39    98  周二
6  赵六    94    58    64  周一
'''


# 查看后五行的数据要调用 tail() 括号内没数据默认查看后五行 括号内有数据 数据是几查看后几行
# 超过了也是直接默认显示全部信息不会报错
# print(df.tail(2))  查看后两行
'''
姓名  语文成绩  数学成绩  英语成绩  星期
5  王五    70    39    98  周二
6  赵六    94    58    64  周一
'''


# 查看excel的形状 表格中有几行几列数据
# 查看excel的形状 要用 .shape   第一个数据是行  第二个数据是列
# print(df.shape)  (7, 5)  7表示行  5表示列
# print(type(df.shape))  <class 'tuple'>  数据的类型是元组 可以通过索引拿取行和列的数据

# print(df.shape[0])  7   [0]  是行的索引 拿取有多少行
# print(df.shape[1])  5   [1]  是列的索引 拿取有多好列

# 打印行的 索引 需要用 .index
# print(df.index)  RangeIndex(start=0, stop=7, step=1)
# 打印行 索引 的具体值需要用 .values
# print(df.index.values)  [0 1 2 3 4 5 6]

# 打印列索引需要用 .columns
# print(df.columns)  Index(['姓名', '语文成绩', '数学成绩', '英语成绩', '星期'], dtype='object')
# 打印列索引的具体值也需要用 .index
# print(df.columns.values)  ['姓名' '语文成绩' '数学成绩' '英语成绩' '星期']


'---------------------行列取值-----------------------------'
# loc 和  iloc  可以查看某一行 某一列的值
# 相同点:
    # loc 和 iloc 都可以通过索引来取值和切片十分相似  [开始值:结束值]
# 不同点:
    # loc 是包括结束值                              iloc不包括结束值
    # loc 取值用的是名称(行用索引 列用名称)            iloc取值取值用的是数字(索引)（行和列都是数字索引）


# ------------------loc取值---------------
# loc后面的链接的是中括号 行和列的索引用逗号隔开   逗号前面代表的是行索引  逗号后面代表的是列索引

# 获取整张列表的索引
# print(df.loc[:,:])  # 冒号代表取所有值

# 获取name列的值
# print(df.loc[:,'姓名'])

# 获取name列的值并转化为列表  要在索引后加 .to_list()
# print(df.loc[:,'姓名'].to_list())

# 获取第一行的数据
# print(df.loc[0,:])

# 获取多行的数据 就要把目标数据的行索引放到列表内
# print(df.loc[[0,1],:]) # 获取0和1两个索引对应的数据

# 获取多列数据 就要把目标数据的列索引放到列表内
# print(df.loc[:,['姓名','语文成绩']])

# 同时获取多行和多列的数据
# print(df.loc[[2,4],['姓名','数学成绩']])


# ----------------iloc取值

# 获取第一行的数据
# print(df.iloc[0,:])

# 获取第一列的数据
# print(df.iloc[:,0])

# 获取多个不连续的行数据   [1,2]括号内的逗号是分隔符 表示区1 2 两个索引的数据
# (df.iloc[[1,2],[3,4]])

# 获取多个连续的行数据   [1:2]括号内的:表示区间 有因为iloc的索引和字符串的索引相同[1:2]中结束值2不取
# print(df.iloc[1:3,:])

'------------------列名取值----------------------'
# print(df['数学成绩'])
'''
0    82
1    63
2    41
3    59
4    46
5    39
6    58
'''
# 通过列名筛选获取数据之后 进行值的筛选 返回的数据是布尔值
# 拿到数学成绩大于40的人
# print(df['数学成绩']>40)
'''
0     True
1     True
2     True
3     True
4     True
5    False
6     True
'''
# df['数学成绩']>40是布尔值 通过布尔值可以获取一整行的数据
# print(df[df['数学成绩']>40])
'''
  姓名  语文成绩  数学成绩  英语成绩  星期
0  张三    18    82    68  周一
1  李四    53    63    52  周二
2  王五    67    41    90  周一
3  李四    63    59    86  周二
4  王五    39    46    60  周一
6  赵六    94    58    64  周一
'''
# 第五行布尔值为False的不符合要求被筛选掉了

# 拿到语文成绩大于40并且数学成绩大于40的同学的数据 要用 &
# &是和的意思
# print(df[(df.数学成绩>40) & (df.语文成绩>40)])

# 拿到语文成绩大于40或数学成绩大于40的同学的数据  要用|
# |是或者的意思
# print(df[(df.数学成绩>40) | (df.语文成绩>40)])


'------------------数据操作扩展-----------------'
# print(df.loc[[0,2,10],:])  KeyError: '[10] not in index'
# 会报错因为10超过了索引的值
# 如果超出了行索引还不想报错 需要加入 .reindex  但超出索引的部分全部会显示为NaN
# print(df.reindex(index=[1,2,10]))
# 如果不想出现NaN 可以 fill_value的操作把nan值进行替换
# print(df.reindex(index=[1,2,10],fill_value=10))

# 复制表格的内容进入到新表格    原因：操作新表格的时候 旧表格的数据不会发生变化
# 应用场景 就是在测试表格的时候会用到
# 将df内的数据复制到df_2这个变量中
df_2 = df.copy()
# 查看表格列的数据类型   object 是非数字类型  int是数字类型
# print(df.info())

# 删除有缺失值的一行要用到 .dropna()
# print(df.dropna())
# 删除有缺失值的一列要用到 .dropna()  axis=1 就表示的是列
# print(df.dropna(axis=1))
# 填充有缺失值的单元格要用到 .fillna() 括号内的数字是缺失单元格内补充的值
# print(df.fillna(200))

# 根据  学生姓名     拿到语文 数学 英语成绩的平均值
print(df.groupby("姓名")[["语文成绩", "数学成绩", "英语成绩"]].mean())
# 根据  学生姓名     拿到语文 数学 英语成绩的平均值 转为整数
print(df.groupby("姓名")[["语文成绩", "数学成绩", "英语成绩"]].mean().astype(int))
# 根据  学生姓名     拿到语文 数学 英语成绩的数量
print(df.groupby("姓名")[["语文成绩", "数学成绩", "英语成绩"]].count())


'----------------------------------------------------------'
# 数据透视表
print(
    pd.pivot_table(
        data=df,  # 要操作的表格
        values="语文成绩",  # 计算的列
        index="姓名",  # 把名字当做行索引
        columns="星期",  # 把周当做列索引
        fill_value=10,  # 自动添加缺失值
        aggfunc="mean",  # 计算数据的平均值
        margins=True  # 记录的总数
    )

)

# 数据交叉表   交叉的是 某两列的数据   生成数据是 0   1
print(
    pd.crosstab(
        df.姓名,  # 交叉的是name列
        df.数学成绩,  # 交叉的是math列
        margins=True

    )
)